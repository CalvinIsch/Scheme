#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 101 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 17 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
0.0 0 90 90 90 90 0 0 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 0 0 0 0
0 0 1 #"\0"
0 70 1 #"\0"
0.0 0 90 90 90 90 0 0 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 0 0 0 0
0           0 643 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 206
(
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e RecursivelyGenerateShapes) (read-case-sensitive #t) (teachpacks ()"
 #") (htdp-settings #(#t constructor repeating-decimal #f #t none #f ()"
 #" #f)))"
) 0 0 4 29 1 #"\n"
0 0 17 3 50 #"; This Program recurssively creates various images"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; Calvin Isch"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Necessary imports"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"SMALL"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"small-tri"
0 0 24 3 2 #" ("
0 0 14 3 8 #"triangle"
0 0 24 3 1 #" "
0 0 14 3 5 #"SMALL"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; creates a sierpinski triangle recursively"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"sierpinski"
0 0 24 3 1 #" "
0 0 14 3 8 #"side-len"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 8 #"side-len"
0 0 24 3 1 #" "
0 0 14 3 5 #"SMALL"
0 0 24 3 2 #") "
0 0 14 3 9 #"small-tri"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"half-tri"
0 0 24 3 2 #" ("
0 0 14 3 10 #"sierpinski"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 8 #"side-len"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"above"
0 0 24 3 1 #" "
0 0 14 3 8 #"half-tri"
0 0 24 3 2 #" ("
0 0 14 3 6 #"beside"
0 0 24 3 1 #" "
0 0 14 3 8 #"half-tri"
0 0 24 3 1 #" "
0 0 14 3 8 #"half-tri"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Constants"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 3 #"160"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"MT"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 24 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; next-size : Number -> Number"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"next-size"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; Purpose: A function that takes two numbers and a image  and return"
 #"s a"
) 0 0 24 29 1 #"\n"
0 0 17 3 60
#"; image with circles placed on that image in sideways order."
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; signature: (circ-beside x:Number size:number Scene:image)->image"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circles"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 14 3 5 #"scene"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 5 #"scene"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 2 #"80"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"circles"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 2 #" ("
0 0 14 3 9 #"next-size"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"next-size"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 2 #") "
0 0 14 3 5 #"scene"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circles"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"60"
0 0 24 3 1 #" "
0 0 14 3 2 #"MT"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 6           4 4 2014
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 300 0) #(struct:p"
 #"oint 300 160) #(struct:point 0 160)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 40 20 #(struct:translate 60 60 #(struct:"
 #"ellipse 120 120 0 outline \"blue\"))) #(struct:translate 0 0 #(struc"
 #"t:crop (#(struct:point 0 0) #(struct:point 300 0) #(struct:point 300"
 #" 160) #(struct:point 0 160)) #(struct:translate 0 0 #(struct:overlay"
 #" #(struct:translate 160 50 #(struct:translate 30 30 #(struct:ellipse"
 #" 60 60 0 outline \"blue\"))) #(struct:translate 0 0 #(struct:crop (#"
 #"(struct:point 0 0) #(struct:point 300 0) #(struct:point 300 160) #(s"
 #"truct:point 0 160)) #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 220 65 #(struct:translate 15 15 #(struct:ellipse 30 30 0 "
 #"outline \"blue\"))) #(struct:translate 0 0 #(struct:crop (#(struct:p"
 #"oint 0 0) #(struct:point 300 0) #(struct:point 300 160) #(struct:poi"
 #"nt 0 160)) #(struct:translate 0 0 #(struct:overlay #(struct:translat"
 #"e 250 145/2 #(struct:translate 15/2 15/2 #(struct:ellipse 15 15 0 ou"
 #"tline \"blue\"))) #(struct:translate 0 0 #(struct:crop (#(struct:poi"
 #"nt 0 0) #(struct:point 300 0) #(struct:point 300 160) #(struct:point"
 #" 0 160)) #(struct:translate 0 0 #(struct:overlay #(struct:translate "
 #"265 305/4 #(struct:translate 15/4 15/4 #(struct:ellipse 15/2 15/2 0 "
 #"outline \"blue\"))) #(struct:translate 0 0 #(struct:crop (#(struct:p"
 #"oint 0 0) #(struct:point 300 0) #(struct:point 300 160) #(struct:poi"
 #"nt 0 160)) #(struct:translate 0 0 #(struct:overlay #(struct:translat"
 #"e 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point"
 #" 0 0 0 0 0 0) #(struct:pulled-point 0 0 300 0 0 0) #(struct:pulled-p"
 #"oint 0 0 300 160 0 0) #(struct:pulled-point 0 0 0 160 0 0)) outline "
 #"#(struct:pen \"black\" 2 solid round round)))) #(struct:translate 0 "
 #"0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0"
 #" 0 0 0 0) #(struct:pulled-point 0 0 300 0 0 0) #(struct:pulled-point"
 #" 0 0 300 160 0 0) #(struct:pulled"
 #"-point 0 0 0 160 0 0)) 255 \"white\")))))))))))))))))))))))))) #(str"
 #"uct:bb 300 160 160) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; This recreates exercise one with a larger frame"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"MT2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #" "
0 0 21 3 3 #"160"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-size2"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"circles2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 14 3 5 #"scene"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 5 #"scene"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 2 #"80"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 8 #"circles2"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-size2"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"next-size2"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 2 #") "
0 0 14 3 5 #"scene"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"circles2"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"80"
0 0 24 3 1 #" "
0 0 14 3 3 #"MT2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 6           4 4 3637
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 500 0) #(struct:p"
 #"oint 500 160) #(struct:point 0 160)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 20 0 #(struct:translate 80 80 #(struct:e"
 #"llipse 160 160 0 outline \"blue\"))) #(struct:translate 0 0 #(struct"
 #":crop (#(struct:point 0 0) #(struct:point 500 0) #(struct:point 500 "
 #"160) #(struct:point 0 160)) #(struct:translate 0 0 #(struct:overlay "
 #"#(struct:translate 180 80/3 #(struct:translate 160/3 160/3 #(struct:"
 #"ellipse 320/3 320/3 0 outline \"blue\"))) #(struct:translate 0 0 #(s"
 #"truct:crop (#(struct:point 0 0) #(struct:point 500 0) #(struct:point"
 #" 500 160) #(struct:point 0 160)) #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 860/3 400/9 #(struct:translate 320/9 320/9 #"
 #"(struct:ellipse 640/9 640/9 0 outline \"blue\"))) #(struct:translate"
 #" 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 500 0) #(stru"
 #"ct:point 500 160) #(struct:point 0 160)) #(struct:translate 0 0 #(st"
 #"ruct:overlay #(struct:translate 3220/9 1520/27 #(struct:translate 64"
 #"0/27 640/27 #(struct:ellipse 1280/27 1280/27 0 outline \"blue\"))) #"
 #"(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:po"
 #"int 500 0) #(struct:point 500 160) #(struct:point 0 160)) #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 10940/27 5200/81 #("
 #"struct:translate 1280/81 1280/81 #(struct:ellipse 2560/81 2560/81 0 "
 #"outline \"blue\"))) #(struct:translate 0 0 #(struct:crop (#(struct:p"
 #"oint 0 0) #(struct:point 500 0) #(struct:point 500 160) #(struct:poi"
 #"nt 0 160)) #(struct:translate 0 0 #(struct:overlay #(struct:translat"
 #"e 35380/81 16880/243 #(struct:translate 2560/243 2560/243 #(struct:e"
 #"llipse 5120/243 5120/243 0 outline \"blue\"))) #(struct:translate 0 "
 #"0 #(struct:crop (#(struct:point 0 0) #(struct:point 500 0) #(struct:"
 #"point 500 160) #(struct:point 0 160)) #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:translate 111260/243 53200/729 #(struct:translate"
 #" 5120/729 5120/729 #(struct:ellipse 10240/729 10240/729 0 outline \""
 #"blue\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) "
 #"#(struct:point 500 0) #(struct:point 500 160) #(struct:point 0 160))"
 #" #(struct:translate 0 0 #(struct:overlay #(struct:translate 344020/7"
 #"29 164720/2187 #(struct:translate 10240/2187 10240/2187 #(struct:ell"
 #"ipse 20480/2187 20480/2187 0 outline \"blue\"))) #(struct:translate "
 #"0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 500 0) #(struc"
 #"t:point 500 160) #(struct:point 0 160)) #(struct:translate 0 0 #(str"
 #"uct:overlay #(struct:translate 1052540/2187 504400/6561 #(struct:tra"
 #"nslate 20480/6561 20480/6561 #(struct:ellipse 40960/6561 40960/6561 "
 #"0 outline \"blue\"))) #(struct:translate 0 0 #(struct:crop (#(struct"
 #":point 0 0) #(struct:point 500 0) #(struct:point 500 160) #(struct:p"
 #"oint 0 160)) #(struct:translate 0 0 #(struct:overlay #(struct:transl"
 #"ate 3198580/6561 1533680/19683 #(struct:translate 40960/19683 40960/"
 #"19683 #(struct:ellipse 81920/19683 81920/19683 0 outline \"blue\")))"
 #" #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:"
 #"point 500 0) #(struct:point 500 160) #(struct:point 0 160)) #(struct"
 #":translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:tran"
 #"slate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(str"
 #"uct:pulled-point 0 0 500 0 0 0) #(struct:pulled-point 0 0 500 160 0 "
 #"0) #(struct:pulled-point 0 0 0 160 0 0)) outline #(struct:pen \"blac"
 #"k\" 2 solid round round)))) #(struct:translate 0 0 #(struct:translat"
 #"e 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:"
 #"pulled-point 0 0 500 0 0 0) #(struct:pulled-point 0 0 500 160 0 0) #"
 #"(struct:pulled-point 0 0 0 160 0 0)) 255 \"white\"))))))))))))))))))"
 #")))))))))))))))))))))))))))) #(struct:bb 500 160 160) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; A function that recursively calls a number to place images on a ba"
 #"ckground"
) 0 0 24 29 1 #"\n"
0 0 17 3 21 #"; in a spiral format."
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; signature: (spiral x:Number size:Number y:Number ang:Number scene:"
 #"image)->image"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"spiral"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 3 #"ang"
0 0 24 3 1 #" "
0 0 14 3 5 #"scene"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 5 #"scene"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"spiral"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-size2"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"cos"
0 0 24 3 1 #" "
0 0 14 3 3 #"ang"
0 0 24 3 5 #"))) ("
0 0 14 3 10 #"next-size2"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-size2"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"sin"
0 0 24 3 1 #" "
0 0 14 3 3 #"ang"
0 0 24 3 5 #"))) ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"ang"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 2 #"pi"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #")) "
0 0 14 3 5 #"scene"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"spiral"
0 0 24 3 1 #" "
0 0 21 3 2 #"62"
0 0 24 3 1 #" "
0 0 21 3 2 #"60"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"-.5"
0 0 24 3 1 #" "
0 0 14 3 2 #"MT"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 6           4 4 3430
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 300 0) #(struct:p"
 #"oint 300 160) #(struct:point 0 160)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 2 30 #(struct:translate 60 60 #(struct:e"
 #"llipse 120 120 0 outline \"blue\"))) #(struct:translate 0 0 #(struct"
 #":crop (#(struct:point 0 0) #(struct:point 300 0) #(struct:point 300 "
 #"160) #(struct:point 0 160)) #(struct:translate 0 0 #(struct:overlay "
 #"#(struct:translate 109.75825618903727 2.057446139579696 #(struct:tra"
 #"nslate 40 40 #(struct:ellipse 80 80 0 outline \"blue\"))) #(struct:t"
 #"ranslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 300 0"
 #") #(struct:point 300 160) #(struct:point 0 160)) #(struct:translate "
 #"0 0 #(struct:overlay #(struct:translate 189.37484136876216 8.2511037"
 #"72135277 #(struct:translate 80/3 80/3 #(struct:ellipse 160/3 160/3 0"
 #" outline \"blue\"))) #(struct:translate 0 0 #(struct:crop (#(struct:"
 #"point 0 0) #(struct:point 300 0) #(struct:point 300 160) #(struct:po"
 #"int 0 160)) #(struct:translate 0 0 #(struct:overlay #(struct:transla"
 #"te 240.91038047919727 29.652860711810867 #(struct:translate 160/9 16"
 #"0/9 #(struct:ellipse 320/9 320/9 0 outline \"blue\"))) #(struct:tran"
 #"slate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 300 0) #"
 #"(struct:point 300 160) #(struct:point 0 160)) #(struct:translate 0 0"
 #" #(struct:overlay #(struct:translate 269.91090638875517 54.165819418"
 #"26411 #(struct:translate 320/27 320/27 #(struct:ellipse 640/27 640/2"
 #"7 0 outline \"blue\"))) #(struct:translate 0 0 #(struct:crop (#(stru"
 #"ct:point 0 0) #(struct:point 300 0) #(struct:point 300 160) #(struct"
 #":point 0 160)) #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 283.3316577685913 75.45140088770356 #(struct:translate 640/81 "
 #"640/81 #(struct:ellipse 1280/81 1280/81 0 outline \"blue\"))) #(stru"
 #"ct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 3"
 #"00 0) #(struct:point 300 160) #(struct:point 0 160)) #(struct:transl"
 #"ate 0 0 #(struct:overlay #(struct:translate 287.37570893582307 91.17"
 #"813376271094 #(struct:translate 1280/243 1280/243 #(struct:ellipse 2"
 #"560/243 2560/243 0 outline \"blue\"))) #(struct:translate 0 0 #(stru"
 #"ct:crop (#(struct:point 0 0) #(struct:point 300 0) #(struct:point 30"
 #"0 160) #(struct:point 0 160)) #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 286.6598612001396 101.35799334008084 #(struct:t"
 #"ranslate 2560/729 2560/729 #(struct:ellipse 5120/729 5120/729 0 outl"
 #"ine \"blue\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point"
 #" 0 0) #(struct:point 300 0) #(struct:point 300 160) #(struct:point 0"
 #" 160)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 28"
 #"4.1589018214529 107.0864922851787 #(struct:translate 5120/2187 5120/"
 #"2187 #(struct:ellipse 10240/2187 10240/2187 0 outline \"blue\"))) #("
 #"struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:poi"
 #"nt 300 0) #(struct:point 300 160) #(struct:point 0 160)) #(struct:tr"
 #"anslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:transla"
 #"te 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct"
 #":pulled-point 0 0 300 0 0 0) #(struct:pulled-point 0 0 300 160 0 0) "
 #"#(struct:pulled-point 0 0 0 160 0 0)) outline #(struct:pen \"black\""
 #" 2 solid round round)))) #(struct:translate 0 0 #(struct:translate 0"
 #" 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pul"
 #"led-point 0 0 300 0 0 0) #(struct:pulled-point 0 0 300 160 0 0) #(st"
 #"ruct:pulled-point 0 0 0 160 0 0)) 255 \"white\")))))))))))))))))))))"
 #"))))))))))))))))))))) #(struct:bb 300 160 160.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; new constants"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"angle-change"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 2 #"pi"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-size3"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; A function that recursively calls a number to place images on a ba"
 #"ckground"
) 0 0 24 29 1 #"\n"
0 0 17 3 21 #"; in a spiral format."
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #"; signature: (spiral2 x:Number size:Number y:Number ang:Number scene"
 #":image)->image"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"spiral2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 3 #"ang"
0 0 24 3 1 #" "
0 0 14 3 5 #"scene"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 5 #"scene"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 7 #"spiral2"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-size3"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"cos"
0 0 24 3 1 #" "
0 0 14 3 3 #"ang"
0 0 24 3 5 #"))) ("
0 0 14 3 10 #"next-size3"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-size3"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"sin"
0 0 24 3 1 #" "
0 0 14 3 3 #"ang"
0 0 24 3 5 #"))) ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"ang"
0 0 24 3 1 #" "
0 0 14 3 12 #"angle-change"
0 0 24 3 2 #") "
0 0 14 3 5 #"scene"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"spiral2"
0 0 24 3 1 #" "
0 0 21 3 2 #"62"
0 0 24 3 1 #" "
0 0 21 3 2 #"60"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 3 #"-.5"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 6           4 4 16730
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 500 0) #(struct:p"
 #"oint 500 500) #(struct:point 0 500)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 2 30 #(struct:translate 60 60 #(struct:e"
 #"llipse 120 120 0 outline \"blue\"))) #(struct:translate 0 0 #(struct"
 #":crop (#(struct:point 0 0) #(struct:point 500 0) #(struct:point 500 "
 #"500) #(struct:point 0 500)) #(struct:translate 0 -19.461470785572345"
 #" #(struct:overlay #(struct:translate 107.97763890744268 0 #(struct:t"
 #"ranslate 600/11 600/11 #(struct:ellipse 1200/11 1200/11 0 outline \""
 #"blue\"))) #(struct:translate 0 19.461470785572345 #(struct:crop (#(s"
 #"truct:point 0 0) #(struct:point 500 0) #(struct:point 500 500) #(str"
 #"uct:point 0 500)) #(struct:translate 0 -25.654848533068176 #(struct:"
 #"overlay #(struct:translate 216.4696603865171 0 #(struct:translate 60"
 #"00/121 6000/121 #(struct:ellipse 12000/121 12000/121 0 outline \"blu"
 #"e\"))) #(struct:translate 0 25.654848533068176 #(struct:crop (#(stru"
 #"ct:point 0 0) #(struct:point 500 0) #(struct:point 500 500) #(struct"
 #":point 0 500)) #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 311.81395293203445 5.505167187427915 #(struct:translate 60000/"
 #"1331 60000/1331 #(struct:ellipse 1"
 #"20000/1331 120000/1331 0 outline \"blue\"))) #(struct:translate 0 0 "
 #"#(struct:crop (#(struct:point 0 0) #(struct:point 500 0) #(struct:po"
 #"int 500 500) #(struct:point 0 500)) #(struct:translate 0 0 #(struct:"
 #"overlay #(struct:translate 382.9325489503358 63.58955821207949 #(str"
 #"uct:translate 600000/14641 600000/14641 #(struct:ellipse 1200000/146"
 #"41 1200000/14641 0 outline \"blue\"))) #(struct:translate 0 0 #(stru"
 #"ct:crop (#(struct:point 0 0) #(struct:point 500 0) #(struct:point 50"
 #"0 500) #(struct:point 0 500)) #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 424.16645489573796 135.9737115536837 #(struct:t"
 #"ranslate 6000000/161051 6000000/161051 #(struct:ellipse 12000000/161"
 #"051 12000000/161051 0 outline \"blue\"))) #(struct:translate 0 0 #(s"
 #"truct:crop (#(struct:point 0 0) #(struct:point 500 0) #(struct:point"
 #" 500 500) #(struct:point 0 500)) #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 435.1703023920815 210.07522202364777 #(struc"
 #"t:translate 60000000/1771561 60000000/1771561 #(struct:ellipse 12000"
 #"0000/1771561 120000000/1771561 0 outline \"blue\"))) #(struct:transl"
 #"ate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 500 0) #(s"
 #"truct:point 500 500) #(struct:point 0 500)) #(struct:translate 0 0 #"
 #"(struct:overlay #(struct:translate 420.045489804364 275.196656724499"
 #"75 #(struct:translate 600000000/19487171 600000000/19487171 #(struct"
 #":ellipse 1200000000/19487171 1200000000/19487171 0 outline \"blue\")"
 #")) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struc"
 #"t:point 500 0) #(struct:point 500 500) #(struct:point 0 500)) #(stru"
 #"ct:translate 0 0 #(struct:overlay #(struct:translate 385.97115775035"
 #"77 323.77161473167234 #(struct:translate 6000000000/214358881 600000"
 #"0000/214358881 #(struct:ellipse 12000000000/214358881 12000000000/21"
 #"4358881 0 outline \"blue\"))) #(struct:translate 0 0 #(struct:crop ("
 #"#(struct:point 0 0) #(struct:point 500 0) #(struct:point 500 500) #("
 #"struct:point 0 500)) #(struct:translate 0 0 #(struct:overlay #(struc"
 #"t:translate 341.62097848330325 351.93492730963976 #(struct:translate"
 #" 60000000000/2357947691 60000000000/2357947691 #(struct:ellipse 1200"
 #"00000000/2357947691 120000000000/2357947691 0 outline \"blue\"))) #("
 #"struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:poi"
 #"nt 500 0) #(struct:point 500 500) #(struct:point 0 500)) #(struct:tr"
 #"anslate 0 0 #(struct:overlay #(struct:translate 295.63516924259653 3"
 #"59.4507032104277 #(struct:translate 600000000000/25937424601 6000000"
 #"00000/25937424601 #(struct:ellipse 1200000000000/25937424601 1200000"
 #"000000/25937424601 0 outline \"blue\"))) #(struct:translate 0 0 #(st"
 #"ruct:crop (#(struct:point 0 0) #(struct:point 500 0) #(struct:point "
 #"500 500) #(struct:point 0 500)) #(struct:translate 0 0 #(struct:over"
 #"lay #(struct:translate 255.36227990301353 349.1202527031417 #(struct"
 #":translate 6000000000000/285311670611 6000000000000/285311670611 #(s"
 #"truct:ellipse 12000000000000/285311670611 12000000000000/28531167061"
 #"1 0 outline \"blue\"))) #(struct:translate 0 0 #(struct:crop (#(stru"
 #"ct:point 0 0) #(struct:point 500 0) #(struct:point 500 500) #(struct"
 #":point 0 500)) #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 226.00849980284565 325.84702542767803 #(struct:translate 60000"
 #"000000000/3138428376721 60000000000000/3138428376721 #(struct:ellips"
 #"e 120000000000000/3138428376721 120000000000000/3138428376721 0 outl"
 #"ine \"blue\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point"
 #" 0 0) #(struct:point 500 0) #(struct:point 500 500) #(struct:point 0"
 #" 500)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 21"
 #"0.24855092128183 295.5552562404269 #(struct:translate 60000000000000"
 #"0/34522712143931 600000000000000/34522712143931 #(struct:ellipse 120"
 #"0000000000000/34522712143931 1200000000000000/34522712143931 0 outli"
 #"ne \"blue\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point "
 #"0 0) #(struct:point 500 0) #(struct:point 500 500) #(struct:point 0 "
 #"500)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 208"
 #".2751499052081 264.1463297731728 #(struct:translate 6000000000000000"
 #"/379749833583241 6000000000000000/379749833583241 #(struct:ellipse 1"
 #"2000000000000000/379749833583241 12000000000000000/379749833583241 0"
 #" outline \"blue\"))) #(struct:translate 0 0 #(struct:crop (#(struct:"
 #"point 0 0) #(struct:point 500 0) #(struct:point 500 500) #(struct:po"
 #"int 0 500)) #(struct:translate 0 0 #(struct:overlay #(struct:transla"
 #"te 218.20369119409736 236.6394044678091 #(struct:translate 600000000"
 #"00000000/4177248169415651 60000000000000000/4177248169415651 #(struc"
 #"t:ellipse 120000000000000000/4177248169415651 120000000000000000/417"
 #"7248169415651 0 outline \"blue\"))) #(struct:translate 0 0 #(struct:"
 #"crop (#(struct:point 0 0) #(struct:point 500 0) #(struct:point 500 5"
 #"00) #(struct:point 0 500)) #(struct:translate 0 0 #(struct:overlay #"
 #"(struct:translate 236.71116820249026 216.59037769356704 #(struct:tra"
 #"nslate 600000000000000000/45949729863572161 600000000000000000/45949"
 #"729863572161 #(struct:ellipse 1200000000000000000/45949729863572161 "
 #"1200000000000000000/45949729863572161 0 outline \"blue\"))) #(struct"
 #":translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 500"
 #" 0) #(struct:point 500 500) #(struct:point 0 500)) #(struct:translat"
 #"e 0 0 #(struct:overlay #(struct:translate 259.77499017099746 205.826"
 #"12055159325 #(struct:translate 6000000000000000000/50544702849929377"
 #"1 6000000000000000000/505447028499293771 #(struct:ellipse 1200000000"
 #"0000000000/505447028499293771 12000000000000000000/50544702849929377"
 #"1 0 outline \"blue\"))) #(struct:translate 0 0 #(struct:crop (#(stru"
 #"ct:point 0 0) #(struct:point 500 0) #(struct:point 500 500) #(struct"
 #":point 0 500)) #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 283.3860150456147 204.47826110478383 #(struct:translate 600000"
 #"00000000000000/5559917313492231481 60000000000000000000/555991731349"
 #"2231481 #(struct:ellipse 120000000000000000000/5559917313492231481 1"
 #"20000000000000000000/5559917313492231481 0 outline \"blue\"))) #(str"
 #"uct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"500 0) #(struct:point 500 500) #(struct:point 0 500)) #(struct:trans"
 #"late 0 0 #(struct:overlay #(struct:translate 304.13571103481877 211."
 #"2595883972429 #(struct:translate 600000000000000000000/6115909044841"
 #"4546291 600000000000000000000/61159090448414546291 #(struct:ellipse "
 #"1200000000000000000000/61159090448414546291 1200000000000000000000/6"
 #"1159090448414546291 0 outline \"blue\"))) #(struct:translate 0 0 #(s"
 #"truct:crop (#(struct:point 0 0) #(struct:point 500 0) #(struct:point"
 #" 500 500) #(struct:point 0 500)) #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 319.61318962489037 223.90044421883496 #(stru"
 #"ct:translate 6000000000000000000000/672749994932560009201 6000000000"
 #"000000000000/672749994932560009201 #(struct:ellipse 1200000000000000"
 #"0000000/672749994932560009201 12000000000000000000000/67274999493256"
 #"0009201 0 outline \"blue\"))) #(struct:translate 0 0 #(struct:crop ("
 #"#(struct:point 0 0) #(struct:point 500 0) #(struct:point 500 500) #("
 #"struct:point 0 500)) #(struct:translate 0 0 #(struct:overlay #(struc"
 #"t:translate 328.58688894104046 239.65334495546992 #(struct:translate"
 #" 60000000000000000000000/7400249944258160101211 60000000000000000000"
 #"000/7400249944258160101211 #(struct:ellipse 120000000000000000000000"
 #"/7400249944258160101211 120000000000000000000000/7400249944258160101"
 #"211 0 outline \"blue\"))) #(struct:translate 0 0 #(struct:crop (#(st"
 #"ruct:point 0 0) #(struct:point 500 0) #(struct:point 500 500) #(stru"
 #"ct:point 0 500)) #(struct:translate 0 0 #(struct:overlay #(struct:tr"
 #"anslate 330.98164676203623 255.77999263979288 #(struct:translate 600"
 #"000000000000000000000/81402749386839761113321 6000000000000000000000"
 #"00/81402749386839761113321 #(struct:ellipse 120000000000000000000000"
 #"0/81402749386839761113321 1200000000000000000000000/8140274938683976"
 #"1113321 0 outline \"blue\"))) #(struct:translate 0 0 #(struct:crop ("
 #"#(struct:point 0 0) #(struct:point 500 0) #(struct:point 500 500) #("
 #"struct:point 0 500)) #(struct:translate 0 0 #(struct:overlay #(struc"
 #"t:translate 327.6900468695832 269.9523141951539 #(struct:translate 6"
 #"000000000000000000000000/895430243255237372246531 600000000000000000"
 #"0000000/895430243255237372246531 #(struct:ellipse 120000000000000000"
 #"00000000/895430243255237372246531 12000000000000000000000000/8954302"
 #"43255237372246531 0 outline \"blue\"))) #(struct:translate 0 0 #(str"
 #"uct:crop (#(struct:point 0 0) #(struct:point 500 0) #(struct:point 5"
 #"00 500) #(struct:point 0 500)) #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:translate 320.27447943204317 280.5236403272976 #(struct:"
 #"translate 60000000000000000000000000/9849732675807611094711841 60000"
 #"000000000000000000000/9849732675807611094711841 #(struct:ellipse 120"
 #"000000000000000000000000/9849732675807611094711841 12000000000000000"
 #"0000000000/9849732675807611094711841 0 outline \"blue\"))) #(struct:"
 #"translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 500 "
 #"0) #(struct:point 500 500) #(struct:point 0 500)) #(struct:translate"
 #" 0 0 #(struct:overlay #(struct:translate 310.62258824601594 286.6527"
 #"977046284 #(struct:translate 600000000000000000000000000/10834705943"
 #"3883722041830251 600000000000000000000000000/10834705943388372204183"
 #"0251 #(struct:ellipse 1200000000000000000000000000/10834705943388372"
 #"2041830251 1200000000000000000000000000/108347059433883722041830251 "
 #"0 outline \"blue\"))) #(struct:translate 0 0 #(struct:crop (#(struct"
 #":point 0 0) #(struct:point 500 0) #(struct:point 500 500) #(struct:p"
 #"oint 0 500)) #(struct:translate 0 0 #(struct:overlay #(struct:transl"
 #"ate 300.6147363223503 288.2884495187093 #(struct:translate 600000000"
 #"0000000000000000000/1191817653772720942460132761 6000000000000000000"
 #"000000000/1191817653772720942460132761 #(struct:ellipse 120000000000"
 #"00000000000000000/1191817653772720942460132761 120000000000000000000"
 #"00000000/1191817653772720942460132761 0 outline \"blue\"))) #(struct"
 #":translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 500"
 #" 0) #(struct:point 500 500) #(struct:point 0 500)) #(struct:translat"
 #"e 0 0 #(struct:overlay #(struct:translate 291.85018221960456 286.040"
 #"2425024856 #(struct:translate 60000000000000000000000000000/13109994"
 #"191499930367061460371 60000000000000000000000000000/1310999419149993"
 #"0367061460371 #(struct:ellipse 120000000000000000000000000000/131099"
 #"94191499930367061460371 120000000000000000000000000000/1310999419149"
 #"9930367061460371 0 outline \"blue\"))) #(struct:translate 0 0 #(stru"
 #"ct:crop (#(struct:point 0 0) #(struct:point 500 0) #(struct:point 50"
 #"0 500) #(struct:point 0 500)) #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 285.461944424231 280.9753101634787 #(struct:tra"
 #"nslate 600000000000000000000000000000/144209936106499234037676064081"
 #" 600000000000000000000000000000/144209936106499234037676064081 #(str"
 #"uct:ellipse 1200000000000000000000000000000/144209936106499234037676"
 #"064081 1200000000000000000000000000000/14420993610649923403767606408"
 #"1 0 outline \"blue\"))) #(struct:translate 0 0 #(struct:crop (#(stru"
 #"ct:point 0 0) #(struct:point 500 0) #(struct:point 500 500) #(struct"
 #":point 0 500)) #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 282.0321203690394 274.38293861370255 #(struct:translate 600000"
 #"0000000000000000000000000/1586309297171491574414436704891 6000000000"
 #"000000000000000000000/1586309297171491574414436704891 #(struct:ellip"
 #"se 12000000000000000000000000000000/1586309297171491574414436704891 "
 #"12000000000000000000000000000000/1586309297171491574414436704891 0 o"
 #"utline \"blue\"))) #(struct:translate 0 0 #(struct:crop (#(struct:po"
 #"int 0 0) #(struct:point 500 0) #(struct:point 500 500) #(struct:poin"
 #"t 0 500)) #(struct:translate 0 0 #(struct:overlay #(struct:translate"
 #" 281.6026508113439 267.5474410905377 #(struct:translate 600000000000"
 #"00000000000000000000/17449402268886407318558803753801 60000000000000"
 #"000000000000000000/17449402268886407318558803753801 #(struct:ellipse"
 #" 120000000000000000000000000000000/17449402268886407318558803753801 "
 #"120000000000000000000000000000000/17449402268886407318558803753801 0"
 #" outline \"blue\"))) #(struct:translate 0 0 #(struct:crop (#(struct:"
 #"point 0 0) #(struct:point 500 0) #(struct:point 500 500) #(struct:po"
 #"int 0 500)) #(struct:translate 0 0 #(struct:overlay #(struct:transla"
 #"te 283.7633906717017 261.5611327080872 #(struct:translate 6000000000"
 #"00000000000000000000000/191943424957750480504146841291811 6000000000"
 #"00000000000000000000000/191943424957750480504146841291811 #(struct:e"
 #"llipse 1200000000000000000000000000000000/19194342495775048050414684"
 #"1291811 1200000000000000000000000000000000/1919434249577504805041468"
 #"41291811 0 outline \"blue\"))) #(struct:translate 0 0 #(struct:crop "
 #"(#(struct:point 0 0) #(struct:point 500 0) #(struct:point 500 500) #"
 #"(struct:point 0 500)) #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:translate 287.79115689869434 257.1978803377754 #(struct:translate"
 #" 6000000000000000000000000000000000/21113776745352552855456152542099"
 #"21 6000000000000000000000000000000000/211137767453525528554561525420"
 #"9921 #(struct:ellipse 12000000000000000000000000000000000/2111377674"
 #"535255285545615254209921 12000000000000000000000000000000000/2111377"
 #"674535255285545615254209921 0 outline \"blue\"))) #(struct:translate"
 #" 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 500 0) #(stru"
 #"ct:point 500 500) #(struct:point 0 500)) #(struct:translate 0 0 #(st"
 #"ruct:overlay #(struct:translate 292.8105165417184 254.8552643585448 "
 #"#(struct:translate 60000000000000000000000000000000000/2322515441988"
 #"7808141001767796309131 60000000000000000000000000000000000/232251544"
 #"19887808141001767796309131 #(struct:ellipse 120000000000000000000000"
 #"000000000000/23225154419887808141001767796309131 1200000000000000000"
 #"00000000000000000/23225154419887808141001767796309131 0 outline \"bl"
 #"ue\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #("
 #"struct:point 500 0) #(struct:point 500 500) #(struct:point 0 500)) #"
 #"(struct:translate 0 0 #(struct:overlay #(struct:translate 297.948963"
 #"4803011 254.56193087196908 #(struct:translate 6000000000000000000000"
 #"00000000000000/255476698618765889551019445759400441 6000000000000000"
 #"00000000000000000000/255476698618765889551019445759400441 #(struct:e"
 #"llipse 1200000000000000000000000000000000000/25547669861876588955101"
 #"9445759400441 1200000000000000000000000000000000000/2554766986187658"
 #"89551019445759400441 0 outline \"blue\"))) #(struct:translate 0 0 #("
 #"struct:crop (#(struct:point 0 0) #(struct:point 500 0) #(struct:poin"
 #"t 500 500) #(struct:point 0 500)) #(struct:translate 0 0 #(struct:ov"
 #"erlay #(struct:translate 302.46470188633987 256.0377452701371 #(stru"
 #"ct:translate 6000000000000000000000000000000000000/28102436848064247"
 #"85061213903353404851 6000000000000000000000000000000000000/281024368"
 #"4806424785061213903353404851 #(struct:ellipse 1200000000000000000000"
 #"0000000000000000/2810243684806424785061213903353404851 1200000000000"
 #"0000000000000000000000000/2810243684806424785061213903353404851 0 ou"
 #"tline \"blue\"))) #(struct:translate 0 0 #(struct:crop (#(struct:poi"
 #"nt 0 0) #(struct:point 500 0) #(struct:point 500 500) #(struct:point"
 #" 0 500)) #(struct:translate 0 0 #(struct:overlay #(struct:translate "
 #"0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0"
 #" 0 0 0 0 0) #(struct:pulled-point 0 0 500 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 500 500 0 0) #(struct:pulled-point 0 0 0 500 0 0)) outline #("
 #"struct:pen \"black\" 2 solid round round)))) #(struct:translate 0 0 "
 #"#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0"
 #" 0 0 0) #(struct:pulled-point 0 0 500 0 0 0) #(struct:pulled-point 0"
 #" 0 500 500 0 0) #(struct:pulled-point 0 0 0 500 0 0)) 255 \"white\")"
 #"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"
 #"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"
 #"))))))))))))) #(struct:bb 500 500 500.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0           0
